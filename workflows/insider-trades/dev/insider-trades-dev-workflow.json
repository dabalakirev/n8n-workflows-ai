{
  "name": "Insider Trades DEV",
  "active": true,
  "nodes": [
    {
      "parameters": {
        "path": "insider-trades-test-dev",
        "responseMode": "responseNode",
        "options": {}
      },
      "id": "test-webhook",
      "name": "Test Webhook",
      "type": "n8n-nodes-base.webhook",
      "position": [
        112,
        112
      ],
      "webhookId": "insider-trades-test-dev-001",
      "typeVersion": 2
    },
    {
      "parameters": {
        "url": "https://financialmodelingprep.com/stable/insider-trading/latest",
        "authentication": "genericCredentialType",
        "genericAuthType": "httpQueryAuth",
        "sendQuery": true,
        "queryParameters": {
          "parameters": [
            {
              "name": "page",
              "value": "0"
            },
            {
              "name": "limit",
              "value": "500"
            }
          ]
        },
        "options": {
          "response": {
            "response": {
              "responseFormat": "json"
            }
          },
          "timeout": 30000
        }
      },
      "id": "fmp-api",
      "name": "FMP Latest Insider Trading",
      "type": "n8n-nodes-base.httpRequest",
      "position": [
        304,
        192
      ],
      "typeVersion": 4.2,
      "credentials": {
        "httpQueryAuth": {
          "id": "k887gSxTZZEgRYIa",
          "name": "FMP API"
        }
      }
    },
    {
      "parameters": {
        "jsCode": "const filteredDeals = $input.all().filter(deal => {\n  const isPurchase = deal.json.transactionType === \"P-Purchase\";\n  \n  // Enhanced security name matching - contains \"common stock\" anywhere\n  const securityName = deal.json.securityName.toLowerCase();\n  const isValidSecurity = securityName.includes(\"common stock\");\n  \n  const hasRequiredFields = deal.json.symbol && deal.json.reportingName && deal.json.securitiesTransacted && deal.json.price;\n  \n  return isPurchase && isValidSecurity && hasRequiredFields;\n});\n\nconsole.log(`Original: ${$input.all().length}, Filtered: ${filteredDeals.length}`);\nconsole.log('Sample filtered securities:', filteredDeals.slice(0, 5).map(d => `${d.json.symbol}: ${d.json.securityName}`));\nreturn filteredDeals;"
      },
      "id": "data-filtering",
      "name": "Filter Trades",
      "type": "n8n-nodes-base.code",
      "position": [
        448,
        64
      ],
      "typeVersion": 2
    },
    {
      "parameters": {
        "conditions": {
          "options": {
            "leftValue": "",
            "caseSensitive": true,
            "typeValidation": "strict"
          },
          "combinator": "and",
          "conditions": [
            {
              "id": "condition-1",
              "operator": {
                "type": "number",
                "operation": "gt"
              },
              "leftValue": "={{ $input.all().length }}",
              "rightValue": 0
            }
          ]
        },
        "options": {}
      },
      "id": "early-exit-check",
      "name": "Early Exit Check",
      "type": "n8n-nodes-base.if",
      "position": [
        608,
        208
      ],
      "typeVersion": 2
    },
    {
      "parameters": {
        "options": {
          "reset": false
        }
      },
      "id": "split-batches",
      "name": "Split In Batches",
      "type": "n8n-nodes-base.splitInBatches",
      "position": [
        784,
        80
      ],
      "typeVersion": 3
    },
    {
      "parameters": {
        "jsCode": "const currentDeal = $input.first().json;\n\n// Deduplication key\nconst dedupKey = [\n  currentDeal.symbol,\n  currentDeal.transactionDate,\n  currentDeal.reportingName,\n  currentDeal.securitiesTransacted,\n  currentDeal.price,\n  currentDeal.url\n].join('|');\n\n// Find existing card query (30-card window) - FIXED: No JSON.stringify\nconst cardQuery = {\n  find: {\n    query: { symbol: currentDeal.symbol },\n    options: {\n      sort: { created_at: -1 },\n      limit: 30\n    }\n  }\n};\n\n// Map deal data for MongoDB\nconst mappedDeal = {\n  insider_name: currentDeal.reportingName,\n  role: currentDeal.typeOfOwner,\n  filing_date: currentDeal.filingDate,\n  transaction_date: currentDeal.transactionDate,\n  price: parseFloat(currentDeal.price) || 0,\n  shares: parseInt(currentDeal.securitiesTransacted) || 0,\n  value: Math.round((parseFloat(currentDeal.price) || 0) * (parseInt(currentDeal.securitiesTransacted) || 0) * 100) / 100,\n  code: 'P',\n  ownership_type: currentDeal.directOrIndirect === 'D' ? 'Direct' : 'Indirect',\n  sec_url: currentDeal.url\n};\n\n// Debug logging for JSON fix validation\nconsole.log('JSON Fix Applied:', {\n  symbol: currentDeal.symbol,\n  queryType: typeof cardQuery.find.query,\n  optionsType: typeof cardQuery.find.options,\n  queryContent: cardQuery.find.query,\n  fix: 'Removed JSON.stringify - passing native objects'\n});\n\nreturn [{\n  json: {\n    originalDeal: currentDeal,\n    mappedDeal: mappedDeal,\n    dedupKey: dedupKey,\n    symbol: currentDeal.symbol,\n    mongoQuery: cardQuery,\n    processingTimestamp: new Date().toISOString()\n  }\n}];"
      },
      "id": "deal-processing",
      "name": "Deal Processing Logic",
      "type": "n8n-nodes-base.code",
      "position": [
        960,
        192
      ],
      "typeVersion": 2
    },
    {
      "parameters": {
        "collection": "deals",
        "options": {
          "sort": "={{JSON.stringify($json.mongoQuery.find.options.sort)}}"
        },
        "query": "={{JSON.stringify($json.mongoQuery.find.query)}}"
      },
      "id": "mongodb-card-lookup",
      "name": "MongoDB Card Lookup",
      "type": "n8n-nodes-base.mongoDb",
      "position": [
        1152,
        272
      ],
      "typeVersion": 1.2,
      "credentials": {
        "mongoDb": {
          "id": "Jb779SAaphmHAOGs",
          "name": "MongoDB account"
        }
      }
    },
    {
      "parameters": {
        "respondWith": "text",
        "responseBody": "{{ JSON.stringify({ status: \"success\", message: \"NODE 7 COMPLETELY FIXED - Both Node 6 & 7 JSON Issues Resolved\", data: { foundCards: $input.all().length, cardsData: $input.all(), inputData: $('Deal Processing Logic').all() }, validation: { symbol: $('Deal Processing Logic').first().json.symbol, mongoQuery: $('Deal Processing Logic').first().json.mongoQuery, filteredCount: $('Filter Trades').all().length }, fix: { node6: \"Removed JSON.stringify - passing native objects\", node7: \"Removed JSON.parse - accepting native objects COMPLETELY\", issue: \"[object Object] is not valid JSON - FULLY RESOLVED\" }, nextNode: \"Node 8 (Status Logic) - готов к добавлению\", blockProgress: \"Block 2 Nodes 5-7 COMPLETELY OPERATIONAL\" }) })",
        "options": {}
      },
      "id": "test-response-node7",
      "name": "Test Response (Node 7)",
      "type": "n8n-nodes-base.respondToWebhook",
      "position": [
        1344,
        64
      ],
      "typeVersion": 1
    }
  ],
  "connections": {
    "Test Webhook": {
      "main": [
        [
          {
            "node": "FMP Latest Insider Trading",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Filter Trades": {
      "main": [
        [
          {
            "node": "Early Exit Check",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Early Exit Check": {
      "main": [
        [
          {
            "node": "Split In Batches",
            "type": "main",
            "index": 0
          }
        ],
        []
      ]
    },
    "Split In Batches": {
      "main": [
        [],
        [
          {
            "node": "Deal Processing Logic",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "MongoDB Card Lookup": {
      "main": [
        [
          {
            "node": "Test Response (Node 7)",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Deal Processing Logic": {
      "main": [
        [
          {
            "node": "MongoDB Card Lookup",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "FMP Latest Insider Trading": {
      "main": [
        [
          {
            "node": "Filter Trades",
            "type": "main",
            "index": 0
          }
        ]
      ]
    }
  },
  "settings": {
    "executionOrder": "v1",
    "saveManualExecutions": true,
    "saveExecutionProgress": true,
    "saveDataErrorExecution": "all",
    "saveDataSuccessExecution": "all"
  }
}