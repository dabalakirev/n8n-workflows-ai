{
  "name": "AI Deepseek DEV",
  "id": "0VAipR4PLHbtkIzw", 
  "active": true,
  "createdAt": "2025-08-29T14:50:10.585Z",
  "updatedAt": "2025-08-30T13:25:50.537Z",
  "nodes": [
    {
      "parameters": {},
      "id": "manual-trigger",
      "name": "When clicking 'Execute workflow'",
      "type": "n8n-nodes-base.manualTrigger",
      "position": [-640, 16],
      "typeVersion": 1
    },
    {
      "parameters": {
        "workflowInputs": {
          "values": [
            {"name": "input"},
            {"name": "sessionId"}
          ]
        }
      },
      "id": "execute-workflow-trigger", 
      "name": "When Executed by Another Workflow",
      "type": "n8n-nodes-base.executeWorkflowTrigger",
      "position": [-640, -128],
      "typeVersion": 1.1
    },
    {
      "parameters": {
        "promptType": "define",
        "text": "={{ $json.input }}",
        "options": {"maxIterations": 300}
      },
      "id": "ai-agent",
      "name": "AI Agent", 
      "type": "@n8n/n8n-nodes-langchain.agent",
      "position": [-432, 16],
      "typeVersion": 2.2
    },
    {
      "parameters": {"options": {}},
      "id": "deepseek-model",
      "name": "DeepSeek Chat Model",
      "type": "@n8n/n8n-nodes-langchain.lmChatDeepSeek",
      "position": [-544, 240],
      "typeVersion": 1,
      "credentials": {
        "deepSeekApi": {
          "id": "sFuzOe0ydJ9CEn0H",
          "name": "DeepSeek API"
        }
      }
    },
    {
      "parameters": {
        "description": "–≠—Ç–æ—Ç –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç –ø–æ–ª—É—á–∞–µ—Ç —Ñ–∏–Ω–∞–Ω—Å–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ –∏–∑ Financial Modeling Prep. \n–¢—ã –¥–æ–ª–∂–µ–Ω –ø–µ—Ä–µ–¥–∞–≤–∞—Ç—å JSON —Å –¥–≤—É–º—è –∫–ª—é—á–∞–º–∏: \n- 'toolName' (–æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ): —Å—Ç—Ä–æ–∫–∞ —Å –∫–æ–º–∞–Ω–¥–æ–π, –∫–æ—Ç–æ—Ä—É—é –Ω—É–∂–Ω–æ –≤—ã–ø–æ–ª–Ω–∏—Ç—å. \n- 'params' (–æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ): –æ–±—ä–µ–∫—Ç —Å –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏ –¥–ª—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã.\n\n–°–ü–ò–°–û–ö –î–û–°–¢–£–ü–ù–´–• –ö–û–ú–ê–ù–î ('toolName'):\n\n1. 'Insider.Trading.Latest': –ø–æ–ª—É—á–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –ø–æ—Å–ª–µ–¥–Ω–∏—Ö —Å–¥–µ–ª–æ–∫ –∏–Ω—Å–∞–π–¥–µ—Ä–æ–≤.\n   –ü–∞—Ä–∞–º–µ—Ç—Ä—ã –≤ 'params':\n   - 'page': –Ω–æ–º–µ—Ä —Å—Ç—Ä–∞–Ω–∏—Ü—ã (—á—Ç–æ–±—ã –ø—Ä–æ–ª–∏—Å—Ç—ã–≤–∞—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã).\n   - 'limit': —Å–∫–æ–ª—å–∫–æ –∑–∞–ø–∏—Å–µ–π –≤–µ—Ä–Ω—É—Ç—å.\n\n2. 'Insider.Trading.ReportingName': –Ω–∞—Ö–æ–¥–∏—Ç –≤—Å–µ —Å–¥–µ–ª–∫–∏ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –∏–Ω—Å–∞–π–¥–µ—Ä–∞ (–ø–æ–∫—É–ø–∞—Ç–µ–ª—è –∏–ª–∏ –ø—Ä–æ–¥–∞–≤—Ü–∞).\n   –ü–∞—Ä–∞–º–µ—Ç—Ä—ã –≤ 'params':\n   - 'name': –∏–º—è –∏–Ω—Å–∞–π–¥–µ—Ä–∞ (–Ω–∞–ø—Ä–∏–º–µ—Ä \"Elon Musk\").\n\n3. 'Insider.Trading.Search': –Ω–∞—Ö–æ–¥–∏—Ç –≤—Å–µ —Å–¥–µ–ª–∫–∏ –∏–Ω—Å–∞–π–¥–µ—Ä–æ–≤ –ø–æ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–π –∫–æ–º–ø–∞–Ω–∏–∏.\n   –ü–∞—Ä–∞–º–µ—Ç—Ä—ã –≤ 'params':\n   - 'symbol': —Ç–∏–∫–µ—Ä –∫–æ–º–ø–∞–Ω–∏–∏ (–Ω–∞–ø—Ä–∏–º–µ—Ä \"AAPL\").\n   - 'page': –Ω–æ–º–µ—Ä —Å—Ç—Ä–∞–Ω–∏—Ü—ã (—á—Ç–æ–±—ã –ø—Ä–æ–ª–∏—Å—Ç—ã–≤–∞—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã).\n   - 'limit': —Å–∫–æ–ª—å–∫–æ –∑–∞–ø–∏—Å–µ–π –≤–µ—Ä–Ω—É—Ç—å.\n\n4. 'Company.Profile': –ø–æ–ª—É—á–∞–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∫–æ–º–ø–∞–Ω–∏–∏ –ø–æ –µ—ë —Ç–∏–∫–µ—Ä—É.\n   –ü–∞—Ä–∞–º–µ—Ç—Ä—ã –≤ 'params':\n   - 'symbol': —Ç–∏–∫–µ—Ä –∫–æ–º–ø–∞–Ω–∏–∏ (–Ω–∞–ø—Ä–∏–º–µ—Ä \"AAPL\").\n   –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç: –Ω–∞–∑–≤–∞–Ω–∏–µ –∫–æ–º–ø–∞–Ω–∏–∏, –∏–Ω–¥—É—Å—Ç—Ä–∏—é, —Å–µ–∫—Ç–æ—Ä, –æ–ø–∏—Å–∞–Ω–∏–µ.\n",
        "workflowId": {
          "__rl": true,
          "value": "UmUET85BJqPbpRPp",
          "mode": "list",
          "cachedResultName": "FMP API Router DEV"
        },
        "workflowInputs": {
          "mappingMode": "defineBelow",
          "value": {
            "toolName": "={{ $json.toolName || 'Insider.Trading.Latest' }}",
            "params": "={{ $json.params || {} }}"
          },
          "matchingColumns": [],
          "schema": [
            {
              "id": "toolName",
              "displayName": "toolName",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "canBeUsedToMatch": true,
              "type": "string",
              "removed": false
            },
            {
              "id": "params",
              "displayName": "params", 
              "required": false,
              "defaultMatch": false,
              "display": true,
              "canBeUsedToMatch": true,
              "type": "object",
              "removed": false
            }
          ],
          "attemptToConvertTypes": false,
          "convertFieldsToString": false
        }
      },
      "id": "workflow-tool",
      "name": "Call n8n Workflow Tool",
      "type": "@n8n/n8n-nodes-langchain.toolWorkflow",
      "position": [-192, 240],
      "typeVersion": 2.2
    },
    {
      "parameters": {
        "path": "ai-deepseek-dev",
        "options": {}
      },
      "id": "webhook-trigger",
      "name": "Webhook Trigger",
      "type": "n8n-nodes-base.webhook",
      "typeVersion": 2,
      "position": [-640, -272],
      "webhookId": "6f72c6c8-b3d5-4600-8cf4-31060b0b5960"
    },
    {
      "id": "response-formatter",
      "name": "Response Formatter",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [-192, -80],
      "parameters": {
        "jsCode": "// Test Webhook Response Formatter\n// Formats AI Agent response according to Test Webhook protocol\n\nconst incomingData = $input.all();\nconst results = [];\n\nfor (const item of incomingData) {\n  const testMetadata = item.json?.__testMetadata;\n  \n  if (testMetadata) {\n    // TEST RESPONSE - Format according to protocol\n    const response = {\n      testExecution: {\n        executionId: 'exec-' + Date.now(),\n        status: 'success',\n        timestamp: new Date().toISOString(),\n        parentWorkflow: {\n          name: testMetadata.parentWorkflow || 'ai-deepseek',\n          status: 'completed',\n          duration: 'calculated-in-production',\n          testType: testMetadata.testType\n        },\n        testResults: {\n          aiResponse: item.json.output || item.json.response || 'No response generated',\n          childWorkflows: [\n            {\n              name: 'fmp-router',\n              status: 'completed',  // Will be updated by monitoring\n              callCount: 'tracked-automatically'\n            }\n          ]\n        },\n        monitoring: testMetadata.monitoring,\n        sessionId: testMetadata.sessionId || 'unknown'\n      }\n    };\n    \n    console.log('üìä TEST RESPONSE FORMATTED:', {\n      executionId: response.testExecution.executionId,\n      testType: response.testExecution.parentWorkflow.testType,\n      status: response.testExecution.status\n    });\n    \n    results.push({ json: response });\n  } else {\n    // REGULAR RESPONSE - Pass through AI output\n    results.push({\n      json: {\n        response: item.json.output || item.json.response || item.json,\n        timestamp: new Date().toISOString(),\n        type: 'regular_execution'\n      }\n    });\n  }\n}\n\nreturn results;"
      }
    },
    {
      "id": "test-data-processor-v2",
      "name": "Test Data Processor v2",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [-432, -272],
      "parameters": {
        "jsCode": "// Test Webhook - Test Execution Data Processor v2\n// Fixed to handle GET query parameters properly\n\nconst incomingData = $input.all();\nconst results = [];\n\nfor (const item of incomingData) {\n  const webhookData = item.json;\n  // Check query params first (GET requests), then body (POST requests)\n  const testData = webhookData.query || webhookData;\n  \n  if (testData && testData.testType) {\n    // TEST WEBHOOK DATA\n    console.log('üß™ TEST WEBHOOK:', {\n      testType: testData.testType,\n      parentWorkflow: testData.parentWorkflow,\n      input: testData.testData?.input?.substring(0, 50) + '...'\n    });\n    \n    const aiInput = testData.testData?.input || 'Test query not provided';\n    const sessionId = testData.testData?.sessionId || 'test-session-default';\n    \n    results.push({\n      json: {\n        input: aiInput,\n        sessionId: sessionId,\n        __testMetadata: {\n          testType: testData.testType,\n          parentWorkflow: testData.parentWorkflow,\n          monitoring: testData.monitoring || {},\n          timestamp: new Date().toISOString()\n        }\n      }\n    });\n  } else {\n    // REGULAR WEBHOOK DATA\n    const input = webhookData.input || webhookData.body || 'Regular webhook triggered';\n    results.push({\n      json: {\n        input: input,\n        sessionId: 'webhook-session-' + Date.now()\n      }\n    });\n  }\n}\n\nreturn results;"
      }
    }
  ],
  "connections": {
    "When clicking 'Execute workflow'": {
      "main": [
        [
          {
            "node": "AI Agent",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "When Executed by Another Workflow": {
      "main": [
        [
          {
            "node": "AI Agent",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "DeepSeek Chat Model": {
      "ai_languageModel": [
        [
          {
            "node": "AI Agent",
            "type": "ai_languageModel",
            "index": 0
          }
        ]
      ]
    },
    "Call n8n Workflow Tool": {
      "ai_tool": [
        [
          {
            "node": "AI Agent",
            "type": "ai_tool",
            "index": 0
          }
        ]
      ]
    },
    "AI Agent": {
      "main": [
        [
          {
            "node": "Response Formatter",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Webhook Trigger": {
      "main": [
        [
          {
            "node": "Test Data Processor v2",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Test Data Processor v2": {
      "main": [
        [
          {
            "node": "AI Agent",
            "type": "main",
            "index": 0
          }
        ]
      ]
    }
  },
  "settings": {
    "executionOrder": "v1",
    "saveDataErrorExecution": "all",
    "saveDataSuccessExecution": "all",
    "saveManualExecutions": true,
    "saveExecutionProgress": true
  },
  "meta": {
    "description": "AI Deepseek DEV - Enhanced —Å Test Webhook Integration",
    "lastSyncFromN8N": "2025-08-30T15:55:00.000Z",
    "workflowId": "0VAipR4PLHbtkIzw",
    "project": "First Bird DEV",
    "testWebhookUrl": "https://dm83.app.n8n.cloud/webhook/ai-deepseek-dev",
    "enhancements": [
      "Test Data Processor v2 - Protocol-compliant test data handling",
      "Response Formatter - Test execution response formatting", 
      "Webhook Trigger - MCP webhook testing integration",
      "Enhanced connections - Complete test webhook flow"
    ]
  }
}