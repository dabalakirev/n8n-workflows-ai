name: 🎫 Issue Automation

on:
  issues:
    types: [opened, edited, closed, reopened]
  issue_comment:
    types: [created]
  pull_request:
    types: [opened, closed]

# Fix for 403 "Resource not accessible by integration" error
permissions:
  issues: write
  contents: read
  pull-requests: write

jobs:
  auto-label:
    name: 🏷️ Auto-assign Labels
    runs-on: ubuntu-latest
    if: github.event.action == 'opened' && github.event.issue
    
    steps:
    - name: 📥 Checkout Repository
      uses: actions/checkout@v4
      
    # 🔍 DEBUGGING: Log automation trigger context
    - name: 🐛 Debug Issue Automation Context
      run: |
        echo "## 🎫 ISSUE AUTOMATION EXECUTION" >> $GITHUB_STEP_SUMMARY
        echo "| Property | Value |" >> $GITHUB_STEP_SUMMARY
        echo "|----------|-------|" >> $GITHUB_STEP_SUMMARY
        echo "| Action | ${{ github.event.action }} |" >> $GITHUB_STEP_SUMMARY
        echo "| Issue Number | #${{ github.event.issue.number }} |" >> $GITHUB_STEP_SUMMARY
        echo "| Author | ${{ github.event.issue.user.login }} |" >> $GITHUB_STEP_SUMMARY
        echo "| Title Length | ${{ length(github.event.issue.title) }} chars |" >> $GITHUB_STEP_SUMMARY
        echo "| Has Body | ${{ github.event.issue.body != '' }} |" >> $GITHUB_STEP_SUMMARY
        
    - name: 🏷️ Auto-label based on title
      uses: actions/github-script@v7
      with:
        github-token: ${{secrets.GITHUB_TOKEN}}
        script: |
          const title = context.payload.issue.title.toLowerCase();
          const body = context.payload.issue.body?.toLowerCase() || '';
          const labels = [];
          
          // 🔍 DEBUGGING: Log input data
          console.log('Processing issue:', context.payload.issue.number);
          console.log('Title:', title);
          console.log('Body length:', body.length);
          
          // Priority labels based on content
          if (title.includes('critical') || body.includes('critical') || body.includes('🔴 critical')) {
            labels.push('🔴 critical');
          } else if (title.includes('high') || body.includes('high priority') || body.includes('🟡 high')) {
            labels.push('🟡 high');
          } else if (title.includes('low') || body.includes('low priority') || body.includes('⚪ low')) {
            labels.push('⚪ low');
          } else {
            labels.push('🟢 medium');
          }
          
          // Component labels
          if (title.includes('deepseek') || body.includes('deepseek')) {
            labels.push('🤖 ai-deepseek');
          }
          if (title.includes('fmp') || title.includes('router') || body.includes('fmp')) {
            labels.push('🔗 fmp-router');
          }
          if (title.includes('orchestrator') || body.includes('test orchestrator')) {
            labels.push('🧪 test-orchestrator');
          }
          
          // Environment labels
          if (body.includes('[x] dev') || body.includes('dev окружение') || title.includes('dev')) {
            labels.push('🔄 dev');
          }
          if (body.includes('[x] prod') || body.includes('prod окружение') || title.includes('prod')) {
            labels.push('🚀 prod');
          }
          
          // 🔍 DEBUGGING: Log label assignment decision
          console.log('Auto-assigned labels:', labels);
          console.log('Label count:', labels.length);
          
          if (labels.length > 0) {
            await github.rest.issues.addLabels({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              labels: labels
            });
            console.log('✅ Labels successfully applied');
          } else {
            console.log('⚠️ No labels matched for auto-assignment');
          }

  template-validation:
    name: ✅ Validate Issue Template
    runs-on: ubuntu-latest
    if: github.event.action == 'opened' && github.event.issue
    
    steps:
    - name: 🔍 Check Template Compliance
      uses: actions/github-script@v7
      with:
        github-token: ${{secrets.GITHUB_TOKEN}}
        script: |
          const title = context.payload.issue.title;
          const body = context.payload.issue.body || '';
          
          let warnings = [];
          let suggestions = [];
          
          // 🔍 DEBUGGING: Log validation input
          console.log('Validating issue template compliance for:', title);
          console.log('Body contains sections:', body.split('##').length - 1);
          
          // Check title format
          const titleFormats = ['[BUG]', '[FEATURE]', '[ENHANCEMENT]', '[DOCS]', '[TEST]'];
          const hasValidFormat = titleFormats.some(format => title.includes(format));
          
          if (!hasValidFormat) {
            warnings.push('Заголовок не содержит стандартный префикс: ' + titleFormats.join(', '));
          }
          
          // Check for required sections in bug reports
          if (title.includes('[BUG]')) {
            if (!body.includes('## 🔄 Затронутый workflow')) {
              warnings.push('Bug report должен содержать секцию "Затронутый workflow"');
            }
            if (!body.includes('## 📝 Шаги для воспроизведения')) {
              warnings.push('Bug report должен содержать секцию "Шаги для воспроизведения"');
            }
          }
          
          // Check for required sections in feature requests
          if (title.includes('[FEATURE]')) {
            if (!body.includes('## 💡 Мотивация и контекст')) {
              warnings.push('Feature request должен содержать секцию "Мотивация и контекст"');
            }
            if (!body.includes('## 🧪 Критерии приемки')) {
              warnings.push('Feature request должен содержать секцию "Критерии приемки"');
            }
          }
          
          // 🔍 DEBUGGING: Log validation results
          console.log('Validation warnings:', warnings.length);
          console.log('Template compliance:', warnings.length === 0 ? 'PASS' : 'FAIL');
          
          // Create comment if there are issues
          if (warnings.length > 0) {
            const comment = `## 📋 Проверка соответствия шаблону
            
          ⚠️ **Обнаружены проблемы с форматированием Issue:**
          
          ${warnings.map(w => `- ${w}`).join('\n')}
          
          📖 **Рекомендации:**
          - Используйте шаблоны при создании Issues
          - Заполните все обязательные секции
          - Следуйте [GitHub Issues Protocol](../blob/main/docs/github-issues-protocol.md)
          
          *Этот комментарий создан автоматически*`;
          
            await github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: comment
            });
            
            console.log('✅ Template compliance comment posted');
          } else {
            console.log('✅ Issue template compliance verified - no warnings');
          }

  milestone-assignment:
    name: 📅 Auto-assign Milestones
    runs-on: ubuntu-latest
    if: github.event.action == 'opened' && github.event.issue
    
    steps:
    - name: 🎯 Assign to Roadmap Milestone
      uses: actions/github-script@v7
      with:
        github-token: ${{secrets.GITHUB_TOKEN}}
        script: |
          const title = context.payload.issue.title.toLowerCase();
          const body = context.payload.issue.body?.toLowerCase() || '';
          const labels = context.payload.issue.labels.map(l => l.name);
          
          let milestone = null;
          
          // 🔍 DEBUGGING: Log milestone assignment logic
          console.log('Analyzing issue for milestone assignment');
          console.log('Title keywords:', title.split(' ').slice(0, 5));
          console.log('Labels:', labels);
          
          // v1.1 - Testing Framework (highest priority)
          if (title.includes('test') || title.includes('orchestrator') || 
              body.includes('test orchestrator') || body.includes('execute workflow trigger') ||
              labels.some(l => l.includes('testing'))) {
            milestone = 'v1.1 - Testing Framework';
          }
          // v1.2 - Infrastructure & Automation  
          else if (title.includes('github action') || title.includes('automation') ||
                   title.includes('ci/cd') || title.includes('pipeline') ||
                   body.includes('github actions')) {
            milestone = 'v1.2 - Infrastructure & Automation';
          }
          // v1.3 - Advanced Features
          else if (title.includes('advanced') || title.includes('optimization') ||
                   title.includes('monitoring') || body.includes('enterprise')) {
            milestone = 'v1.3 - Advanced Features';
          }
          // Default to current milestone for high priority items
          else if (labels.some(l => l.includes('🔴 critical') || l.includes('🟡 high'))) {
            milestone = 'v1.1 - Testing Framework';
          }
          
          // 🔍 DEBUGGING: Log milestone decision
          console.log('Assigned milestone:', milestone || 'None');
          
          if (milestone) {
            console.log(`Auto-assigning to milestone: ${milestone}`);
            
            // Note: This requires milestones to be created manually in GitHub first
            // The actual API call would need milestone numbers, not names
            const comment = `🎯 **Auto-assignment**: Этот Issue относится к milestone **${milestone}**
            
          Согласно [Project Roadmap](../blob/main/docs/roadmap.md), эта задача запланирована для указанного milestone.
          
          *Milestone будет назначен вручную после создания в GitHub Projects.*`;
          
            await github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: comment
            });
            
            console.log('✅ Milestone assignment comment posted');
          } else {
            console.log('ℹ️ No milestone criteria matched - manual assignment needed');
          }

  close-automation:
    name: 🔄 Handle Issue Closure
    runs-on: ubuntu-latest
    if: github.event.action == 'closed'
    
    steps:
    # 📝 SKIP REASON: This job only runs when issues are closed
    # Will be skipped for all other issue events (opened, edited, reopened)
    - name: 📊 Update Project Metrics
      uses: actions/github-script@v7
      with:
        github-token: ${{secrets.GITHUB_TOKEN}}
        script: |
          const issue = context.payload.issue;
          
          // 🔍 DEBUGGING: Log closure event details
          console.log('Processing issue closure:', issue.number);
          console.log('Issue state:', issue.state);
          console.log('Closed by:', issue.closed_by?.login || 'Unknown');
          console.log('Total comments:', issue.comments);
          
          // Create closure summary comment
          const comment = `## ✅ Issue Closed
          
          **Closed at**: ${new Date().toISOString()}
          **Total comments**: ${issue.comments}
          **Labels**: ${issue.labels.map(l => l.name).join(', ') || 'None'}
          
          📊 **Impact**: Этот Issue был частью roadmap развития проекта n8n workflows.
          
          ---
          *Автоматически создано при закрытии Issue*`;
          
          await github.rest.issues.createComment({
            issue_number: context.issue.number,
            owner: context.repo.owner,
            repo: context.repo.repo,
            body: comment
          });
          
          console.log(`✅ Issue #${issue.number} closure processed: ${issue.title}`);

  pr-link-issues:
    name: 🔗 Link PRs to Issues
    runs-on: ubuntu-latest
    if: github.event.pull_request && github.event.action == 'opened'
    
    steps:
    # 📝 SKIP REASON: This job only runs when pull requests are opened  
    # Will be skipped for issue events and other PR events (closed, edited, etc.)
    - name: 🔍 Find Related Issues
      uses: actions/github-script@v7
      with:
        github-token: ${{secrets.GITHUB_TOKEN}}
        script: |
          const pr = context.payload.pull_request;
          const body = pr.body?.toLowerCase() || '';
          const title = pr.title.toLowerCase();
          
          // 🔍 DEBUGGING: Log PR analysis
          console.log('Analyzing PR for issue links:', pr.number);
          console.log('PR title:', title);
          console.log('Body length:', body.length);
          
          // Look for issue references in PR
          const issueRefs = [];
          const patterns = [
            /(?:close[sd]?|fix(?:e[sd])?|resolve[sd]?)\s*#(\d+)/gi,
            /#(\d+)/g
          ];
          
          patterns.forEach(pattern => {
            let match;
            while ((match = pattern.exec(body + ' ' + title)) !== null) {
              const issueNum = parseInt(match[1]);
              if (!issueRefs.includes(issueNum)) {
                issueRefs.push(issueNum);
              }
            }
          });
          
          // 🔍 DEBUGGING: Log issue reference detection
          console.log('Found issue references:', issueRefs);
          console.log('Issue link count:', issueRefs.length);
          
          if (issueRefs.length > 0) {
            const comment = `🔗 **Связанные Issues**: ${issueRefs.map(n => `#${n}`).join(', ')}
            
          Этот Pull Request связан с указанными Issues. После merge связанные Issues будут автоматически закрыты если используются ключевые слова (closes, fixes, resolves).`;
          
            await github.rest.issues.createComment({
              issue_number: pr.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: comment
            });
            
            console.log('✅ Issue link comment posted');
          } else {
            console.log('ℹ️ No issue references found in PR');
          }

  # 🔍 DEBUGGING: Summary job that always runs to show workflow execution
  automation-summary:
    name: 📋 Automation Summary
    runs-on: ubuntu-latest
    if: always()
    needs: [auto-label, template-validation, milestone-assignment, close-automation, pr-link-issues]
    
    steps:
    - name: 📊 Generate Execution Summary
      run: |
        echo "## 🎫 ISSUE AUTOMATION SUMMARY" >> $GITHUB_STEP_SUMMARY
        echo "| Job | Status | Reason |" >> $GITHUB_STEP_SUMMARY
        echo "|-----|---------|---------|" >> $GITHUB_STEP_SUMMARY
        echo "| Auto-label | ${{ needs.auto-label.result }} | ${{ needs.auto-label.result == 'skipped' && 'Not an opened issue' || 'Completed' }} |" >> $GITHUB_STEP_SUMMARY
        echo "| Template Validation | ${{ needs.template-validation.result }} | ${{ needs.template-validation.result == 'skipped' && 'Not an opened issue' || 'Completed' }} |" >> $GITHUB_STEP_SUMMARY
        echo "| Milestone Assignment | ${{ needs.milestone-assignment.result }} | ${{ needs.milestone-assignment.result == 'skipped' && 'Not an opened issue' || 'Completed' }} |" >> $GITHUB_STEP_SUMMARY
        echo "| Close Automation | ${{ needs.close-automation.result }} | ${{ needs.close-automation.result == 'skipped' && 'Issue not closed' || 'Completed' }} |" >> $GITHUB_STEP_SUMMARY
        echo "| PR Link Issues | ${{ needs.pr-link-issues.result }} | ${{ needs.pr-link-issues.result == 'skipped' && 'Not a PR opened event' || 'Completed' }} |" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "**Event**: ${{ github.event_name }} (${{ github.event.action }})" >> $GITHUB_STEP_SUMMARY
        echo "**Trigger**: ${{ github.event.issue.number || github.event.pull_request.number || 'N/A' }}" >> $GITHUB_STEP_SUMMARY