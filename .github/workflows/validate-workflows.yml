name: 📝 Validate n8n Workflows

on:
  push:
    branches: [ main ]
    paths: 
      - 'workflows/**/*.json'
  pull_request:
    branches: [ main ]
    paths:
      - 'workflows/**/*.json'

jobs:
  validate:
    name: 🔍 JSON & Schema Validation
    runs-on: ubuntu-latest
    
    steps:
    - name: 📥 Checkout Repository
      uses: actions/checkout@v4
      
    - name: 📋 Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        
    # 🔍 DEBUGGING: Log workflow execution context
    - name: 🐛 Debug Workflow Context
      run: |
        echo "## 🔍 WORKFLOW EXECUTION CONTEXT" >> $GITHUB_STEP_SUMMARY
        echo "| Property | Value |" >> $GITHUB_STEP_SUMMARY
        echo "|----------|-------|" >> $GITHUB_STEP_SUMMARY
        echo "| Event | ${{ github.event_name }} |" >> $GITHUB_STEP_SUMMARY
        echo "| Branch | ${{ github.ref_name }} |" >> $GITHUB_STEP_SUMMARY
        echo "| Commit | ${{ github.sha }} |" >> $GITHUB_STEP_SUMMARY
        echo "| Actor | ${{ github.actor }} |" >> $GITHUB_STEP_SUMMARY
        echo "| Workflow | ${{ github.workflow }} |" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "**Files Changed**: $(git diff --name-only ${{ github.event.before }}..${{ github.sha }} | grep '\.json$' | wc -l) JSON files" >> $GITHUB_STEP_SUMMARY
        
    - name: 🔍 Validate JSON Structure
      run: |
        echo "🔎 Validating JSON files..."
        json_count=0
        error_count=0
        
        find workflows/ -name "*.json" -type f 2>/dev/null | while read -r file; do
          if [ -f "$file" ]; then
            json_count=$((json_count + 1))
            echo "Checking $file"
            if ! python -m json.tool "$file" > /dev/null; then
              echo "❌ Invalid JSON in $file"
              error_count=$((error_count + 1))
              exit 1
            else
              echo "✅ Valid JSON: $file"
            fi
          fi
        done
        
        # 🔍 DEBUGGING: Log validation stats
        echo "📊 JSON Validation completed: $json_count files checked, $error_count errors found"
        
    - name: 🛡️ Security Check - No Hardcoded Secrets
      run: |
        echo "🔐 Scanning for hardcoded secrets..."
        secret_warnings=0
        
        # Check if workflows directory exists and has JSON files
        if [ -d "workflows/" ] && find workflows/ -name "*.json" -type f | grep -q .; then
          # Check for actual hardcoded API keys with values (not just credential names)
          if grep -r -E "\"api.*key\"\s*:\s*\"[^\"]{10,}\"" workflows/ --include="*.json" 2>/dev/null; then
            echo "⚠️ WARNING: Found potential hardcoded API keys!"
            echo "Please use n8n credentials instead of hardcoding keys in JSON"
            secret_warnings=$((secret_warnings + 1))
            exit 1
          fi
          
          # Check for other hardcoded patterns but exclude n8n credential configurations
          if grep -r -i "api.*key.*[:=].*[a-zA-Z0-9]{20,}" workflows/ --include="*.json" 2>/dev/null | grep -v "credentials\|PLACEHOLDER_ID"; then
            echo "⚠️ WARNING: Found potential hardcoded API keys!"
            echo "Please use n8n credentials instead of hardcoding keys in JSON"
            secret_warnings=$((secret_warnings + 1))
            exit 1
          fi
        fi
        
        # 🔍 DEBUGGING: Log security scan results
        echo "🔐 Security scan completed: $secret_warnings warnings found"
        echo "✅ No hardcoded secrets detected"
        
    - name: 🏗️ Validate Project-Centric n8n Workflow Structure
      run: |
        echo "🔧 Validating project-centric n8n workflow structure..."
        
        # 🔍 DEBUGGING: Initialize validation counters
        total_projects=0
        total_workflows=0
        validation_errors=0
        
        # Check if workflows directory exists
        if [ ! -d "workflows/" ]; then
          echo "⚠️ No workflows/ directory found"
          validation_errors=$((validation_errors + 1))
          exit 0
        fi
        
        # Validate project structure
        for project_dir in workflows/*/; do
          if [ -d "$project_dir" ] && [ "$(basename "$project_dir")" != "workflows" ]; then
            project_name=$(basename "$project_dir")
            total_projects=$((total_projects + 1))
            echo "📁 Validating project: $project_name"
            
            # Check for dev and prod directories
            if [ ! -d "$project_dir/dev" ]; then
              echo "⚠️ Missing dev/ directory in project $project_name"
              validation_errors=$((validation_errors + 1))
            fi
            
            if [ ! -d "$project_dir/prod" ]; then
              echo "⚠️ Missing prod/ directory in project $project_name"
              validation_errors=$((validation_errors + 1))
            fi
            
            # Check project README
            if [ ! -f "$project_dir/README.md" ]; then
              echo "⚠️ Missing README.md in project $project_name"
              validation_errors=$((validation_errors + 1))
            fi
          fi
        done
        
        # Validate individual workflow files using find with proper error handling
        workflow_found=false
        find workflows/ -name "*.json" -type f 2>/dev/null | while read -r file; do
          if [ -f "$file" ]; then
            workflow_found=true
            total_workflows=$((total_workflows + 1))
            echo "Validating n8n structure: $file"
            
            # Check required fields
            if ! jq -e '.nodes' "$file" > /dev/null 2>&1; then
              echo "❌ Missing 'nodes' array in $file"
              validation_errors=$((validation_errors + 1))
              exit 1
            fi
            
            if ! jq -e '.connections' "$file" > /dev/null 2>&1; then
              echo "❌ Missing 'connections' object in $file"
              validation_errors=$((validation_errors + 1))
              exit 1
            fi
            
            # Check if it's DEV workflow (should have 2 triggers)
            if [[ "$file" == */dev/* ]]; then
              trigger_count=$(jq '[.nodes[] | select(.type | contains("Trigger"))] | length' "$file" 2>/dev/null || echo "0")
              if [ "$trigger_count" -ne 2 ]; then
                echo "⚠️ DEV workflow $file should have exactly 2 triggers (Manual + Execute Workflow)"
                echo "Found: $trigger_count triggers"
                validation_errors=$((validation_errors + 1))
              fi
            fi
            
            # Check if it's PROD workflow (should have 1 trigger)  
            if [[ "$file" == */prod/* ]]; then
              trigger_count=$(jq '[.nodes[] | select(.type | contains("Trigger"))] | length' "$file" 2>/dev/null || echo "0")
              if [ "$trigger_count" -ne 1 ]; then
                echo "⚠️ PROD workflow $file should have exactly 1 trigger (Manual only)"
                echo "Found: $trigger_count triggers"
                validation_errors=$((validation_errors + 1))
              fi
            fi
            
            echo "✅ Structure valid: $file"
          fi
        done
        
        # 🔍 DEBUGGING: Log final validation stats
        total_workflow_files=$(find workflows/ -name "*.json" -type f 2>/dev/null | wc -l)
        echo "📊 Validation Summary: $total_projects projects, $total_workflow_files workflows, $validation_errors errors"
        
        # Check if any workflows were found
        if [ "$total_workflow_files" -eq 0 ]; then
          echo "⚠️ No workflow JSON files found in workflows/ directory"
          validation_errors=$((validation_errors + 1))
        else
          echo "✅ Validated $total_workflow_files workflow files"
        fi
        
        # 🔍 DEBUGGING: Exit with error count for transparency
        if [ "$validation_errors" -gt 0 ]; then
          echo "❌ Validation completed with $validation_errors errors"
          exit 1
        fi
        
    - name: 📊 Generate Project-Centric Validation Report
      if: always()
      run: |
        echo "📋 PROJECT-CENTRIC VALIDATION SUMMARY" >> $GITHUB_STEP_SUMMARY
        echo "=====================================" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        
        # 🔍 DEBUGGING: Add validation status indicator
        if [ "${{ job.status }}" = "success" ]; then
          echo "✅ **Status**: All validations passed" >> $GITHUB_STEP_SUMMARY
        else
          echo "❌ **Status**: Validation errors detected" >> $GITHUB_STEP_SUMMARY
        fi
        echo "" >> $GITHUB_STEP_SUMMARY
        
        if [ -d "workflows/" ]; then
          total_files=$(find workflows/ -name "*.json" -type f 2>/dev/null | wc -l)
          echo "📁 Total workflow files: $total_files" >> $GITHUB_STEP_SUMMARY
          
          # Count projects
          project_count=$(find workflows/ -maxdepth 1 -type d ! -name workflows 2>/dev/null | wc -l)
          echo "🎯 Active projects: $project_count" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          
          # Per-project breakdown
          for project_dir in workflows/*/; do
            if [ -d "$project_dir" ] && [ "$(basename "$project_dir")" != "workflows" ]; then
              project_name=$(basename "$project_dir")
              dev_files=$(find "$project_dir/dev/" -name "*.json" -type f 2>/dev/null | wc -l)
              prod_files=$(find "$project_dir/prod/" -name "*.json" -type f 2>/dev/null | wc -l)
              
              echo "🐦 **$project_name** Project:" >> $GITHUB_STEP_SUMMARY
              echo "  - 🔄 DEV workflows: $dev_files" >> $GITHUB_STEP_SUMMARY
              echo "  - 🚀 PROD workflows: $prod_files" >> $GITHUB_STEP_SUMMARY
              echo "" >> $GITHUB_STEP_SUMMARY
            fi
          done
          
          if [ "${{ job.status }}" = "success" ]; then
            echo "✅ All project-centric validations passed!" >> $GITHUB_STEP_SUMMARY
          else
            echo "❌ Some validations failed - check logs above" >> $GITHUB_STEP_SUMMARY
          fi
        else
          echo "⚠️ No workflows/ directory found" >> $GITHUB_STEP_SUMMARY
        fi
        
        # 🔍 DEBUGGING: Add troubleshooting section for failures
        if [ "${{ job.status }}" != "success" ]; then
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "## 🔧 Troubleshooting" >> $GITHUB_STEP_SUMMARY
          echo "Common issues and solutions:" >> $GITHUB_STEP_SUMMARY
          echo "- **JSON validation errors**: Check file syntax with online JSON validator" >> $GITHUB_STEP_SUMMARY
          echo "- **Missing nodes/connections**: Ensure n8n export includes all required fields" >> $GITHUB_STEP_SUMMARY
          echo "- **Trigger count mismatch**: DEV needs 2 triggers, PROD needs 1 trigger" >> $GITHUB_STEP_SUMMARY
          echo "- **Missing directories**: Ensure project has dev/ and prod/ subdirectories" >> $GITHUB_STEP_SUMMARY
        fi