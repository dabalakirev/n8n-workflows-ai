name: 🎫 GitHub Issue Automation

on:
  issues:
    types: [opened, edited, closed, reopened]
  issue_comment:
    types: [created]
  pull_request:
    types: [opened, closed]

# Fix for 403 "Resource not accessible by integration" error
permissions:
  issues: write
  contents: read
  pull-requests: write

jobs:
  auto-label:
    name: 🏷️ Auto-assign Labels
    runs-on: ubuntu-latest
    if: github.event.action == 'opened' && github.event.issue
    
    steps:
    - name: 📥 Checkout Repository
      uses: actions/checkout@v4
      
    - name: 🐛 Debug Issue Automation Context
      run: |
        echo "## 🎫 ISSUE AUTOMATION EXECUTION" >> $GITHUB_STEP_SUMMARY
        echo "| Property | Value |" >> $GITHUB_STEP_SUMMARY
        echo "|----------|-------|" >> $GITHUB_STEP_SUMMARY
        echo "| Action | ${{ github.event.action }} |" >> $GITHUB_STEP_SUMMARY
        echo "| Issue Number | #${{ github.event.issue.number }} |" >> $GITHUB_STEP_SUMMARY
        echo "| Author | ${{ github.event.issue.user.login }} |" >> $GITHUB_STEP_SUMMARY
        
    - name: 🏷️ Auto-label based on title
      uses: actions/github-script@v7
      with:
        github-token: ${{secrets.GITHUB_TOKEN}}
        script: |
          const title = context.payload.issue.title.toLowerCase();
          const body = context.payload.issue.body?.toLowerCase() || '';
          const labels = [];
          
          console.log('Processing issue:', context.payload.issue.number);
          
          // Priority labels based on content
          if (title.includes('critical') || body.includes('critical')) {
            labels.push('🔴 critical');
          } else if (title.includes('high') || body.includes('high priority')) {
            labels.push('🟡 high');
          } else if (title.includes('low') || body.includes('low priority')) {
            labels.push('⚪ low');
          } else {
            labels.push('🟢 medium');
          }
          
          // Component labels
          if (title.includes('deepseek') || body.includes('deepseek')) {
            labels.push('🤖 ai-deepseek');
          }
          if (title.includes('fmp') || title.includes('router')) {
            labels.push('🔗 fmp-router');
          }
          if (title.includes('orchestrator')) {
            labels.push('🧪 test-orchestrator');
          }
          
          if (labels.length > 0) {
            await github.rest.issues.addLabels({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              labels: labels
            });
          }

  template-validation:
    name: ✅ Validate Issue Template
    runs-on: ubuntu-latest
    if: github.event.action == 'opened' && github.event.issue
    
    steps:
    - name: 🔍 Check Template Compliance
      uses: actions/github-script@v7
      with:
        github-token: ${{secrets.GITHUB_TOKEN}}
        script: |
          const title = context.payload.issue.title;
          const body = context.payload.issue.body || '';
          let warnings = [];
          
          const titleFormats = ['[BUG]', '[FEATURE]', '[ENHANCEMENT]', '[DOCS]', '[TEST]'];
          const hasValidFormat = titleFormats.some(format => title.includes(format));
          
          if (!hasValidFormat) {
            warnings.push('Заголовок не содержит стандартный префикс: ' + titleFormats.join(', '));
          }
          
          if (warnings.length > 0) {
            const comment = `## 📋 Проверка соответствия шаблону
            
          ⚠️ **Обнаружены проблемы с форматированием Issue:**
          
          ${warnings.map(w => `- ${w}`).join('\n')}
          
          *Этот комментарий создан автоматически*`;
          
            await github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: comment
            });
          }

  automation-summary:
    name: 📋 Automation Summary
    runs-on: ubuntu-latest
    if: always()
    needs: [auto-label, template-validation]
    
    steps:
    - name: 📊 Generate Execution Summary
      run: |
        echo "## 🎫 CLEAN ISSUE AUTOMATION SUMMARY" >> $GITHUB_STEP_SUMMARY
        echo "| Job | Status |" >> $GITHUB_STEP_SUMMARY
        echo "|-----|---------|" >> $GITHUB_STEP_SUMMARY
        echo "| Auto-label | ${{ needs.auto-label.result }} |" >> $GITHUB_STEP_SUMMARY
        echo "| Template Validation | ${{ needs.template-validation.result }} |" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "**Event**: ${{ github.event_name }} (${{ github.event.action }})" >> $GITHUB_STEP_SUMMARY
        echo "**Status**: CLEAN WORKFLOW - NO PUSH TRIGGERS" >> $GITHUB_STEP_SUMMARY