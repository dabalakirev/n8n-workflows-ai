name: 🏷️ Create Release

on:
  workflow_dispatch:
    inputs:
      version:
        description: 'Release version (e.g., v1.0.0)'
        required: true
        type: string
      release_type:
        description: 'Release type'
        required: true
        default: 'stable'
        type: choice
        options:
          - stable
          - pre-release
          - hotfix
          - development
      release_name:
        description: 'Release name/title'
        required: false
        type: string

  # Automatic releases on milestone completion (disabled for now)
  # push:
  #   tags:
  #     - 'v*.*.*'

# Add required permissions for GITHUB_TOKEN
permissions:
  contents: write
  actions: write
  issues: write
  pull-requests: write

jobs:
  create-release:
    name: 📦 Create GitHub Release
    runs-on: ubuntu-latest
    
    steps:
    - name: 📥 Checkout Repository
      uses: actions/checkout@v4
      with:
        fetch-depth: 0  # Fetch full history for changelog generation
        token: ${{ secrets.GITHUB_TOKEN }}
        
    - name: 🔍 Validate Version Format
      run: |
        version="${{ github.event.inputs.version }}"
        
        # Check if version starts with 'v'
        if [[ ! "$version" =~ ^v[0-9]+\.[0-9]+\.[0-9]+(-[a-zA-Z0-9]+)?$ ]]; then
          echo "❌ Invalid version format: $version"
          echo "Expected format: vMAJOR.MINOR.PATCH or vMAJOR.MINOR.PATCH-suffix"
          exit 1
        fi
        
        echo "✅ Version format valid: $version"
        echo "version=$version" >> $GITHUB_OUTPUT
        
    - name: 📋 Generate Changelog
      id: changelog
      run: |
        version="${{ github.event.inputs.version }}"
        
        echo "Generating changelog for $version..."
        
        # Get previous tag for comparison
        previous_tag=$(git describe --tags --abbrev=0 HEAD^ 2>/dev/null || echo "")
        
        if [ -n "$previous_tag" ]; then
          echo "Comparing with previous tag: $previous_tag"
          
          # Generate commit log since last tag
          commits=$(git log --pretty=format:"- %s (%h)" ${previous_tag}..HEAD)
        else
          echo "No previous tag found, including all commits"
          commits=$(git log --pretty=format:"- %s (%h)")
        fi
        
        # Create changelog
        cat > CHANGELOG.md << EOF
        ## 🚀 Release $version - ${{ github.event.inputs.release_name || 'Automated Release' }}
        
        **Release Date**: $(date +"%Y-%m-%d")
        **Release Type**: ${{ github.event.inputs.release_type }}
        
        ### 📝 Changes in this Release
        $commits
        
        ### 📊 Project Statistics
        - **Total Workflows**: $(find workflows/ -name "*.json" | wc -l)
        - **Documentation Files**: $(find docs/ -name "*.md" | wc -l)  
        - **GitHub Actions**: $(find .github/workflows/ -name "*.yml" | wc -l)
        - **Issues Resolved**: [View closed issues](https://github.com/dabalakirev/n8n-workflows-ai/issues?q=is%3Aissue+is%3Aclosed)
        
        ### 🔗 Quick Links
        - 📚 [Documentation](https://github.com/dabalakirev/n8n-workflows-ai/wiki)
        - 🗺️ [Project Roadmap](docs/roadmap.md)
        - 🎫 [GitHub Issues](https://github.com/dabalakirev/n8n-workflows-ai/issues)
        - 🚀 [Getting Started Guide](https://github.com/dabalakirev/n8n-workflows-ai/wiki/Quick-Start-Guide)
        
        ### 🎯 Compatibility
        - **n8n Version**: Latest compatible
        - **Node.js**: 18.x or higher
        - **MCP Protocol**: Compatible with Claude Desktop
        
        ### 🔄 Upgrade Instructions
        1. Download the workflow artifacts from this release
        2. Import updated JSON files into your n8n instance
        3. Update any changed credentials or configurations  
        4. Test workflows in DEV environment first
        5. Deploy to PROD following migration guidelines
        
        ---
        
        **Full Changelog**: https://github.com/dabalakirev/n8n-workflows-ai/compare/${previous_tag}...$version
        EOF
        
        echo "changelog<<EOF" >> $GITHUB_OUTPUT
        cat CHANGELOG.md >> $GITHUB_OUTPUT
        echo "EOF" >> $GITHUB_OUTPUT
        
    - name: 📦 Package Workflow Artifacts
      run: |
        echo "📦 Creating workflow artifact packages..."
        
        version="${{ github.event.inputs.version }}"
        
        # Create release directory
        mkdir -p release-artifacts
        
        # Package DEV workflows (if exist)
        if [ -d "workflows/dev" ] && [ "$(ls -A workflows/dev/*.json 2>/dev/null)" ]; then
          echo "Packaging DEV workflows..."
          cd workflows/dev
          zip -r "../../release-artifacts/workflows-dev-${version}.zip" *.json
          cd ../..
          echo "✅ DEV workflows packaged"
        else
          echo "⚠️ No DEV workflows found to package"
        fi
        
        # Package PROD workflows (if exist)  
        if [ -d "workflows/prod" ] && [ "$(ls -A workflows/prod/*.json 2>/dev/null)" ]; then
          echo "Packaging PROD workflows..."
          cd workflows/prod  
          zip -r "../../release-artifacts/workflows-prod-${version}.zip" *.json
          cd ../..
          echo "✅ PROD workflows packaged"
        else
          echo "⚠️ No PROD workflows found to package"
        fi
        
        # Package current workflows (fallback)
        if [ -d "workflows" ] && [ "$(ls -A workflows/*.json 2>/dev/null)" ]; then
          echo "Packaging current workflows..."
          cd workflows
          zip -r "../release-artifacts/workflows-current-${version}.zip" *.json
          cd ..
          echo "✅ Current workflows packaged"
        fi
        
        # Package documentation
        if [ -d "docs" ]; then
          echo "Packaging documentation..."
          zip -r "release-artifacts/documentation-${version}.zip" docs/
          echo "✅ Documentation packaged"
        fi
        
        # List created artifacts
        echo "📋 Created artifacts:"
        ls -la release-artifacts/
        
    - name: 🏷️ Create Git Tag
      run: |
        version="${{ github.event.inputs.version }}"
        
        echo "Creating git tag: $version"
        
        git config --local user.email "action@github.com"
        git config --local user.name "GitHub Action"
        
        # Create annotated tag
        git tag -a "$version" -m "Release $version - ${{ github.event.inputs.release_name || 'Automated Release' }}"
        
        # Push tag with token authentication
        git push https://x-access-token:${{ secrets.GITHUB_TOKEN }}@github.com/${{ github.repository }} "$version"
        
        echo "✅ Git tag created and pushed: $version"
        
    - name: 🚀 Create GitHub Release
      uses: softprops/action-gh-release@v1
      with:
        tag_name: ${{ github.event.inputs.version }}
        name: "Release ${{ github.event.inputs.version }} - ${{ github.event.inputs.release_name || 'Automated Release' }}"
        body: ${{ steps.changelog.outputs.changelog }}
        draft: false
        prerelease: ${{ github.event.inputs.release_type != 'stable' }}
        files: release-artifacts/*
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        
    - name: 📊 Update Project Metrics
      run: |
        echo "📊 Updating project metrics after release..."
        
        version="${{ github.event.inputs.version }}"
        
        # Count project statistics
        total_workflows=$(find workflows/ -name "*.json" | wc -l)
        total_docs=$(find docs/ -name "*.md" | wc -l)
        total_actions=$(find .github/workflows/ -name "*.yml" | wc -l)
        
        echo "📈 Release Statistics:"
        echo "  Version: $version"
        echo "  Workflows: $total_workflows"
        echo "  Documentation: $total_docs files"
        echo "  GitHub Actions: $total_actions"
        echo "  Release Date: $(date)"
        
        # This could update a metrics file or send notifications
        
    - name: 💬 Create Release Announcement
      if: github.event.inputs.release_type == 'stable'
      uses: actions/github-script@v7
      with:
        github-token: ${{secrets.GITHUB_TOKEN}}
        script: |
          const version = '${{ github.event.inputs.version }}';
          const releaseName = '${{ github.event.inputs.release_name }}' || 'Automated Release';
          
          // Create announcement issue
          const announcement = `## 🎉 Release Announcement - ${version}
          
          We're excited to announce the release of **${version} - ${releaseName}**!
          
          ### 🎯 What's New
          Check out the [full release notes](https://github.com/dabalakirev/n8n-workflows-ai/releases/tag/${version}) for detailed information.
          
          ### 📦 Download
          - [Workflow Artifacts](https://github.com/dabalakirev/n8n-workflows-ai/releases/tag/${version})
          - [Documentation](https://github.com/dabalakirev/n8n-workflows-ai/wiki)
          
          ### 🚀 Upgrade Guide
          Follow our upgrade instructions in the release notes to safely update your workflows.
          
          ---
          
          Thank you to everyone who contributed to this release! 🙏
          
          *This announcement was created automatically by GitHub Actions.*`;
          
          await github.rest.issues.create({
            owner: context.repo.owner,
            repo: context.repo.repo,
            title: `🎉 Release Announcement: ${version}`,
            body: announcement,
            labels: ['📢 announcement', '🚀 release']
          });
          
          console.log(`Release announcement issue created for ${version}`);

  # Post-release cleanup and notifications
  post-release:
    name: 🧹 Post-Release Tasks
    runs-on: ubuntu-latest
    needs: create-release
    if: success()
    
    steps:
    - name: 📥 Checkout Repository
      uses: actions/checkout@v4
      
    - name: 📋 Post-Release Summary
      run: |
        echo "🎉 RELEASE COMPLETED SUCCESSFULLY" >> $GITHUB_STEP_SUMMARY
        echo "=================================" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "✅ **Version**: ${{ github.event.inputs.version }}" >> $GITHUB_STEP_SUMMARY
        echo "✅ **Type**: ${{ github.event.inputs.release_type }}" >> $GITHUB_STEP_SUMMARY
        echo "✅ **Git Tag**: Created and pushed" >> $GITHUB_STEP_SUMMARY
        echo "✅ **GitHub Release**: Created with artifacts" >> $GITHUB_STEP_SUMMARY
        echo "✅ **Documentation**: Packaged and included" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "🔗 **Links**:" >> $GITHUB_STEP_SUMMARY
        echo "- [View Release](https://github.com/dabalakirev/n8n-workflows-ai/releases/tag/${{ github.event.inputs.version }})" >> $GITHUB_STEP_SUMMARY
        echo "- [Download Artifacts](https://github.com/dabalakirev/n8n-workflows-ai/releases/tag/${{ github.event.inputs.version }})" >> $GITHUB_STEP_SUMMARY
        echo "- [Project Roadmap](https://github.com/dabalakirev/n8n-workflows-ai/blob/main/docs/roadmap.md)" >> $GITHUB_STEP_SUMMARY